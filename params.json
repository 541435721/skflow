{"name":"Scikit Flow","tagline":"Simplified interface for TensorFlow (mimicking Scikit Learn) for Deep Learning","body":"|Travis-CI Build Status| |Codecov Status| |License| |PyPI version| |Join the chat at\r\nhttps://gitter.im/tensorflow/skflow|\r\n\r\nScikit Flow\r\n===========\r\n\r\nThis is a simplified interface for TensorFlow, to get people started on predictive analytics and data mining.\r\n\r\nLibrary covers variety of needs from linear models to *Deep Learning* applications like text and image understanding.\r\n\r\nWhy *TensorFlow*? \r\n-----------------\r\n- TensorFlow provides a good backbone for building different shapes of machine learning applications. \r\n- It will continue to evolve both in the distributed direction and as general pipelinining machinery.\r\n\r\nWhy *Scikit Flow*? \r\n-----------------\r\n- To smooth the transition from the Scikit Learn world of one-liner machine learning into the more open world of building different shapes of ML models. You can start by using fit/predict and slide into TensorFlow APIs as you are getting comfortable. \r\n- To provide a set of reference models that would be easy to integrate with existing code.\r\n\r\nInstallation\r\n============\r\n\r\nDependencies\r\n-----------\r\n- Python: 2.7, 3.4+ \r\n- Scikit learn: 0.16, 0.17, 0.18+ \r\n- Tensorflow: 0.7+\r\n\r\nFirst, you need to make sure you have `TensorFlow <https://github.com/tensorflow/tensorflow#installation>`__ and `Scikit Learn <http://scikit-learn.org/stable/install.html>`__ installed. \r\n\r\nRun the following to install the stable version from PyPI:\r\n\r\n.. code:: bash\r\n\r\n    pip install skflow\r\n\r\nOr run the following to install from the development version from Github:\r\n\r\n.. code:: bash\r\n\r\n    pip install git+git://github.com/tensorflow/skflow.git\r\n\r\nTutorial\r\n--------\r\n\r\n-  `Introduction to Scikit Flow and why you want to start learning\r\n   TensorFlow <https://medium.com/@ilblackdragon/tensorflow-tutorial-part-1-c559c63c0cb1>`__\r\n-  `DNNs, custom model and Digit recognition\r\n   examples <https://medium.com/@ilblackdragon/tensorflow-tutorial-part-2-9ffe47049c92>`__\r\n-  `Categorical variables: One hot vs Distributed\r\n   representation <https://medium.com/@ilblackdragon/tensorflow-tutorial-part-3-c5fc0662bc08>`__\r\n-  More coming soon.\r\n\r\nCommunity\r\n---------\r\n- Twitter `#skflow <https://twitter.com/search?q=skflow&src=typd>`__.\r\n- StackOverflow with `skflow tag <http://stackoverflow.com/questions/tagged/skflow>`__ for questions and struggles.\r\n- Github `issues <https://github.com/tensorflow/skflow/issues>`__ for technical discussions and feature requests. \r\n- `Gitter channel <https://gitter.im/tensorflow/skflow>`__ for non-trivial discussions.\r\n\r\nUsage\r\n-----\r\n\r\nBelow are few simple examples of the API. For more examples, please see `examples <https://github.com/tensorflow/skflow/tree/master/examples>`__.\r\n\r\nGeneral tips\r\n~~~~~~~~~~~~\r\n\r\n-  It's useful to re-scale dataset before passing to estimator to 0 mean and unit standard deviation. Stochastic Gradient Descent doesn't always do the right thing when variable are very different scale.\r\n\r\n-  Categorical variables should be managed before passing input to the estimator. \r\n\r\nLinear Classifier\r\n~~~~~~~~~~~~~~~~~\r\n\r\nSimple linear classification:\r\n\r\n.. code:: python\r\n\r\n    import skflow\r\n    from sklearn import datasets, metrics\r\n\r\n    iris = datasets.load_iris()\r\n    classifier = skflow.TensorFlowLinearClassifier(n_classes=3)\r\n    classifier.fit(iris.data, iris.target)\r\n    score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))\r\n    print(\"Accuracy: %f\" % score)\r\n\r\nLinear Regressor\r\n~~~~~~~~~~~~~~~~\r\n\r\nSimple linear regression:\r\n\r\n.. code:: python\r\n\r\n    import skflow\r\n    from sklearn import datasets, metrics, preprocessing\r\n\r\n    boston = datasets.load_boston()\r\n    X = preprocessing.StandardScaler().fit_transform(boston.data)\r\n    regressor = skflow.TensorFlowLinearRegressor()\r\n    regressor.fit(X, boston.target)\r\n    score = metrics.mean_squared_error(regressor.predict(X), boston.target)\r\n    print (\"MSE: %f\" % score)\r\n\r\nDeep Neural Network\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nExample of 3 layer network with 10, 20 and 10 hidden units respectively:\r\n\r\n.. code:: python\r\n\r\n    import skflow\r\n    from sklearn import datasets, metrics\r\n\r\n    iris = datasets.load_iris()\r\n    classifier = skflow.TensorFlowDNNClassifier(hidden_units=[10, 20, 10], n_classes=3)\r\n    classifier.fit(iris.data, iris.target)\r\n    score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))\r\n    print(\"Accuracy: %f\" % score)\r\n\r\nCustom model\r\n~~~~~~~~~~~~\r\n\r\nExample of how to pass a custom model to the TensorFlowEstimator:\r\n\r\n.. code:: python\r\n\r\n    import skflow\r\n    from sklearn import datasets, metrics\r\n\r\n    iris = datasets.load_iris()\r\n\r\n    def my_model(X, y):\r\n        \"\"\"This is DNN with 10, 20, 10 hidden layers, and dropout of 0.5 probability.\"\"\"\r\n        layers = skflow.ops.dnn(X, [10, 20, 10], keep_prob=0.5)\r\n        return skflow.models.logistic_regression(layers, y)\r\n\r\n    classifier = skflow.TensorFlowEstimator(model_fn=my_model, n_classes=3)\r\n    classifier.fit(iris.data, iris.target)\r\n    score = metrics.accuracy_score(iris.target, classifier.predict(iris.data))\r\n    print(\"Accuracy: %f\" % score)\r\n\r\nSaving / Restoring models\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nEach estimator has a ``save`` method which takes folder path where all model information will be saved. For restoring you can just call ``skflow.TensorFlowEstimator.restore(path)`` and it will return object of your class.\r\n\r\nSome example code:\r\n\r\n.. code:: python\r\n\r\n    import skflow\r\n\r\n    classifier = skflow.TensorFlowLinearRegression()\r\n    classifier.fit(...)\r\n    classifier.save('/tmp/tf_examples/my_model_1/')\r\n\r\n    new_classifier = TensorFlowEstimator.restore('/tmp/tf_examples/my_model_2')\r\n    new_classifier.predict(...)\r\n\r\nSummaries\r\n~~~~~~~~~\r\n\r\nTo get nice visualizations and summaries you can use ``logdir`` parameter on ``fit``. It will start writing summaries for ``loss`` and histograms for variables in your model. You can also add custom summaries in your custom model function by calling ``tf.summary`` and passing Tensors to report.\r\n\r\n.. code:: python\r\n\r\n    classifier = skflow.TensorFlowLinearRegression()\r\n    classifier.fit(X, y, logdir='/tmp/tf_examples/my_model_1/')\r\n\r\nThen run next command in command line:\r\n\r\n.. code:: bash\r\n\r\n    tensorboard --logdir=/tmp/tf_examples/my_model_1\r\n\r\nand follow reported url.\r\n\r\nGraph visualization: |Text classification RNN Graph|\r\n\r\nLoss visualization: |Text classification RNN Loss|\r\n\r\nMore examples\r\n-------------\r\n\r\nSee examples folder for:\r\n\r\n-  Easy way to handle categorical variables - words are just an example of categorical variable.\r\n-  Text Classification - see examples for RNN, CNN on word and characters.\r\n-  Language modeling and text sequence to sequence. \r\n-  Images (CNNs) - see example for digit recognition.\r\n-  More & deeper - different examples showing DNNs and CNNs\r\n\r\n.. |Travis-CI Build Status| image:: https://travis-ci.org/tensorflow/skflow.svg?branch=master\r\n   :target: https://travis-ci.org/tensorflow/skflow\r\n.. |Codecov Status| image:: https://codecov.io/github/tensorflow/skflow/coverage.svg?precision=2\r\n   :target: https://codecov.io/github/tensorflow/skflow\r\n.. |License| image:: https://img.shields.io/badge/license-Apache%202.0-blue.svg\r\n   :target: http://www.apache.org/licenses/LICENSE-2.0.html\r\n.. |Join the chat at https://gitter.im/tensorflow/skflow| image:: https://badges.gitter.im/Join%20Chat.svg\r\n   :target: https://gitter.im/tensorflow/skflow?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n.. |Text classification RNN Graph| image:: https://raw.githubusercontent.com/tensorflow/skflow/master/g3doc/images/text_classification_rnn_graph.png\r\n.. |Text classification RNN Loss| image:: https://raw.githubusercontent.com/tensorflow/skflow/master/g3doc/images/text_classification_rnn_loss.png\r\n.. |PyPI version| image:: https://badge.fury.io/py/skflow.svg\r\n   :target: http://badge.fury.io/py/skflow\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}